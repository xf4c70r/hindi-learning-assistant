{"ast":null,"code":"var _jsxFileName = \"/Users/arvindsudarshan/Documents/Hindi-QA/frontend/src/pages/PracticeSetPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport { Container, Typography, Box, Card, CardContent, Button, LinearProgress, TextField, Alert, Grid, Collapse, IconButton, Paper } from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport practiceService from '../services/practiceService';\nimport { ALLOWED_TYPES, getTypeDisplayName, generateTitleFromTranscript } from './PracticePage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PracticeSetPage = () => {\n  _s();\n  const {\n    videoId,\n    type\n  } = useParams();\n  const navigate = useNavigate();\n  const [questions, setQuestions] = useState([]);\n  const [progress, setProgress] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answer, setAnswer] = useState('');\n  const [feedback, setFeedback] = useState(null);\n  const [showTranscript, setShowTranscript] = useState(false);\n  const [transcript, setTranscript] = useState('');\n  const [videoTitle, setVideoTitle] = useState('');\n  useEffect(() => {\n    // Check if type is allowed\n    if (!ALLOWED_TYPES[type] || ALLOWED_TYPES[type].enabled === false) {\n      setLoading(false);\n      setError(`${getTypeDisplayName(type)} questions are not available. Please select from the available practice types.`);\n      return;\n    }\n    const fetchQuestions = async () => {\n      try {\n        setLoading(true);\n        const data = await practiceService.getPracticeQuestions(videoId, type);\n        if (!data.questions || data.questions.length === 0) {\n          setError(`No ${getTypeDisplayName(type)} questions available for this practice set.`);\n          setQuestions([]);\n        } else {\n          var _data$questions$;\n          // Try to get title from multiple sources in order of preference:\n          // 1. video_title from question\n          // 2. First line of transcript\n          // 3. Video ID as fallback\n          if ((_data$questions$ = data.questions[0]) !== null && _data$questions$ !== void 0 && _data$questions$.video_title && data.questions[0].video_title !== 'Untitled') {\n            setVideoTitle(data.questions[0].video_title);\n          } else if (data.transcript) {\n            const transcriptTitle = generateTitleFromTranscript(data.transcript);\n            setVideoTitle(transcriptTitle || 'Practice Set');\n          } else {\n            // Use generic \"Practice Set\" instead of showing video ID\n            setVideoTitle('Practice Set');\n          }\n          setQuestions(data.questions || []);\n          setProgress(data.progress || {});\n          setTranscript(data.transcript || '');\n          setError(null);\n        }\n      } catch (err) {\n        console.error('Error fetching questions:', err);\n        setError(err.message || 'Failed to fetch questions');\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchQuestions();\n  }, [videoId, type]);\n  const moveToNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n      setAnswer('');\n      setFeedback(null);\n    }\n  };\n  const handleSubmitAnswer = async () => {\n    if (!answer.trim()) return;\n    const currentQuestion = questions[currentQuestionIndex];\n    try {\n      // Clean up both answers for comparison\n      const cleanUserAnswer = answer.toLowerCase().trim().replace(/\\s+/g, ' ');\n      const cleanCorrectAnswer = currentQuestion.answer.toLowerCase().trim().replace(/\\s+/g, ' ');\n      const isCorrect = cleanUserAnswer === cleanCorrectAnswer;\n      await practiceService.submitAnswer({\n        question_id: currentQuestion._id,\n        answer: answer,\n        video_id: videoId,\n        type: type,\n        is_correct: isCorrect\n      });\n      if (isCorrect) {\n        setFeedback({\n          type: 'success',\n          message: 'Correct!'\n        });\n        setProgress(prev => ({\n          ...prev,\n          [currentQuestion._id]: {\n            answer,\n            is_correct: true,\n            submitted_at: new Date().toISOString()\n          }\n        }));\n\n        // Move to next question after a short delay\n        setTimeout(moveToNextQuestion, 1000);\n      } else {\n        setFeedback({\n          type: 'error',\n          message: `Incorrect. The correct answer is: ${currentQuestion.answer}`\n        });\n      }\n    } catch (err) {\n      console.error('Error submitting answer:', err);\n      setFeedback({\n        type: 'error',\n        message: 'Failed to submit answer. Please try again.'\n      });\n    }\n  };\n  const handleGoBack = () => {\n    navigate('/practice');\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      sx: {\n        mt: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(LinearProgress, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"md\",\n      sx: {\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        sx: {\n          mb: 2\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleGoBack,\n        children: \"Back to Practice Sets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  const progressPercentage = Object.keys(progress).length / questions.length * 100;\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"md\",\n    sx: {\n      mt: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        gutterBottom: true,\n        children: videoTitle ? `${videoTitle} - ${getTypeDisplayName(type)}` : `Practice Set - ${getTypeDisplayName(type)}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        color: \"text.secondary\",\n        children: [\"Video ID: \", videoId.substring(0, 8)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LinearProgress, {\n        variant: \"determinate\",\n        value: progressPercentage,\n        sx: {\n          mt: 2,\n          mb: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        color: \"text.secondary\",\n        children: [\"Progress: \", Math.round(progressPercentage), \"% (\", Object.keys(progress).length, \"/\", questions.length, \" questions)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), transcript && /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n            mb: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Transcript\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: () => setShowTranscript(!showTranscript),\n            children: showTranscript ? /*#__PURE__*/_jsxDEV(ExpandLessIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 51\n            }, this) : /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 72\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Collapse, {\n          in: showTranscript,\n          children: /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              backgroundColor: 'background.paper',\n              maxHeight: '400px',\n              overflow: 'auto'\n            },\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              sx: {\n                whiteSpace: 'pre-wrap',\n                lineHeight: 1.8\n              },\n              children: transcript\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }, this), currentQuestion && /*#__PURE__*/_jsxDEV(Card, {\n      sx: {\n        mb: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(CardContent, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: [\"Question \", currentQuestionIndex + 1, \" of \", questions.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          sx: {\n            mb: 3\n          },\n          children: currentQuestion.question_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          label: \"Your Answer\",\n          value: answer,\n          onChange: e => setAnswer(e.target.value),\n          variant: \"outlined\",\n          sx: {\n            mb: 2\n          },\n          onKeyPress: e => {\n            if (e.key === 'Enter' && answer.trim()) {\n              handleSubmitAnswer();\n            }\n          },\n          autoFocus: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 25\n        }, this), feedback && /*#__PURE__*/_jsxDEV(Alert, {\n          severity: feedback.type,\n          sx: {\n            mt: 2,\n            mb: 2\n          },\n          children: feedback.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 2,\n          sx: {\n            mt: 2\n          },\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              onClick: handleSubmitAnswer,\n              disabled: !answer.trim(),\n              children: \"Submit Answer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 29\n          }, this), feedback && feedback.type === 'error' && /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"outlined\",\n              onClick: moveToNextQuestion,\n              children: \"Next Question\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 9\n  }, this);\n};\n_s(PracticeSetPage, \"UMXRGmpM3L7Tbi2PgTepXmhnSUI=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = PracticeSetPage;\nexport default PracticeSetPage;\nvar _c;\n$RefreshReg$(_c, \"PracticeSetPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Container","Typography","Box","Card","CardContent","Button","LinearProgress","TextField","Alert","Grid","Collapse","IconButton","Paper","ExpandMoreIcon","ExpandLessIcon","practiceService","ALLOWED_TYPES","getTypeDisplayName","generateTitleFromTranscript","jsxDEV","_jsxDEV","PracticeSetPage","_s","videoId","type","navigate","questions","setQuestions","progress","setProgress","loading","setLoading","error","setError","currentQuestionIndex","setCurrentQuestionIndex","answer","setAnswer","feedback","setFeedback","showTranscript","setShowTranscript","transcript","setTranscript","videoTitle","setVideoTitle","enabled","fetchQuestions","data","getPracticeQuestions","length","_data$questions$","video_title","transcriptTitle","err","console","message","moveToNextQuestion","prev","handleSubmitAnswer","trim","currentQuestion","cleanUserAnswer","toLowerCase","replace","cleanCorrectAnswer","isCorrect","submitAnswer","question_id","_id","video_id","is_correct","submitted_at","Date","toISOString","setTimeout","handleGoBack","maxWidth","sx","mt","children","fileName","_jsxFileName","lineNumber","columnNumber","severity","mb","variant","onClick","progressPercentage","Object","keys","gutterBottom","color","substring","value","Math","round","display","alignItems","justifyContent","in","p","backgroundColor","maxHeight","overflow","whiteSpace","lineHeight","question_text","fullWidth","label","onChange","e","target","onKeyPress","key","autoFocus","container","spacing","item","disabled","_c","$RefreshReg$"],"sources":["/Users/arvindsudarshan/Documents/Hindi-QA/frontend/src/pages/PracticeSetPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport {\n    Container,\n    Typography,\n    Box,\n    Card,\n    CardContent,\n    Button,\n    LinearProgress,\n    TextField,\n    Alert,\n    Grid,\n    Collapse,\n    IconButton,\n    Paper,\n} from '@mui/material';\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore';\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess';\nimport practiceService from '../services/practiceService';\nimport { ALLOWED_TYPES, getTypeDisplayName, generateTitleFromTranscript } from './PracticePage';\n\nconst PracticeSetPage = () => {\n    const { videoId, type } = useParams();\n    const navigate = useNavigate();\n    const [questions, setQuestions] = useState([]);\n    const [progress, setProgress] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [answer, setAnswer] = useState('');\n    const [feedback, setFeedback] = useState(null);\n    const [showTranscript, setShowTranscript] = useState(false);\n    const [transcript, setTranscript] = useState('');\n    const [videoTitle, setVideoTitle] = useState('');\n\n    useEffect(() => {\n        // Check if type is allowed\n        if (!ALLOWED_TYPES[type] || ALLOWED_TYPES[type].enabled === false) {\n            setLoading(false);\n            setError(`${getTypeDisplayName(type)} questions are not available. Please select from the available practice types.`);\n            return;\n        }\n\n        const fetchQuestions = async () => {\n            try {\n                setLoading(true);\n                const data = await practiceService.getPracticeQuestions(videoId, type);\n                \n                if (!data.questions || data.questions.length === 0) {\n                    setError(`No ${getTypeDisplayName(type)} questions available for this practice set.`);\n                    setQuestions([]);\n                } else {\n                    // Try to get title from multiple sources in order of preference:\n                    // 1. video_title from question\n                    // 2. First line of transcript\n                    // 3. Video ID as fallback\n                    if (data.questions[0]?.video_title && data.questions[0].video_title !== 'Untitled') {\n                        setVideoTitle(data.questions[0].video_title);\n                    } else if (data.transcript) {\n                        const transcriptTitle = generateTitleFromTranscript(data.transcript);\n                        setVideoTitle(transcriptTitle || 'Practice Set');\n                    } else {\n                        // Use generic \"Practice Set\" instead of showing video ID\n                        setVideoTitle('Practice Set');\n                    }\n                    \n                    setQuestions(data.questions || []);\n                    setProgress(data.progress || {});\n                    setTranscript(data.transcript || '');\n                    setError(null);\n                }\n            } catch (err) {\n                console.error('Error fetching questions:', err);\n                setError(err.message || 'Failed to fetch questions');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchQuestions();\n    }, [videoId, type]);\n\n    const moveToNextQuestion = () => {\n        if (currentQuestionIndex < questions.length - 1) {\n            setCurrentQuestionIndex(prev => prev + 1);\n            setAnswer('');\n            setFeedback(null);\n        }\n    };\n\n    const handleSubmitAnswer = async () => {\n        if (!answer.trim()) return;\n\n        const currentQuestion = questions[currentQuestionIndex];\n        try {\n            // Clean up both answers for comparison\n            const cleanUserAnswer = answer.toLowerCase().trim().replace(/\\s+/g, ' ');\n            const cleanCorrectAnswer = currentQuestion.answer.toLowerCase().trim().replace(/\\s+/g, ' ');\n            const isCorrect = cleanUserAnswer === cleanCorrectAnswer;\n\n            await practiceService.submitAnswer({\n                question_id: currentQuestion._id,\n                answer: answer,\n                video_id: videoId,\n                type: type,\n                is_correct: isCorrect\n            });\n\n            if (isCorrect) {\n                setFeedback({\n                    type: 'success',\n                    message: 'Correct!'\n                });\n                setProgress(prev => ({\n                    ...prev,\n                    [currentQuestion._id]: {\n                        answer,\n                        is_correct: true,\n                        submitted_at: new Date().toISOString()\n                    }\n                }));\n                \n                // Move to next question after a short delay\n                setTimeout(moveToNextQuestion, 1000);\n            } else {\n                setFeedback({\n                    type: 'error',\n                    message: `Incorrect. The correct answer is: ${currentQuestion.answer}`\n                });\n            }\n        } catch (err) {\n            console.error('Error submitting answer:', err);\n            setFeedback({\n                type: 'error',\n                message: 'Failed to submit answer. Please try again.'\n            });\n        }\n    };\n\n    const handleGoBack = () => {\n        navigate('/practice');\n    };\n\n    if (loading) {\n        return (\n            <Container maxWidth=\"md\" sx={{ mt: 4 }}>\n                <LinearProgress />\n            </Container>\n        );\n    }\n\n    if (error) {\n        return (\n            <Container maxWidth=\"md\" sx={{ mt: 4 }}>\n                <Alert severity=\"error\" sx={{ mb: 2 }}>{error}</Alert>\n                <Button variant=\"contained\" onClick={handleGoBack}>\n                    Back to Practice Sets\n                </Button>\n            </Container>\n        );\n    }\n\n    const currentQuestion = questions[currentQuestionIndex];\n    const progressPercentage = (Object.keys(progress).length / questions.length) * 100;\n\n    return (\n        <Container maxWidth=\"md\" sx={{ mt: 4 }}>\n            <Box sx={{ mb: 4 }}>\n                <Typography variant=\"h4\" gutterBottom>\n                    {videoTitle ? `${videoTitle} - ${getTypeDisplayName(type)}` : `Practice Set - ${getTypeDisplayName(type)}`}\n                </Typography>\n                <Typography variant=\"subtitle2\" color=\"text.secondary\">\n                    Video ID: {videoId.substring(0, 8)}\n                </Typography>\n                <LinearProgress \n                    variant=\"determinate\" \n                    value={progressPercentage} \n                    sx={{ mt: 2, mb: 1 }}\n                />\n                <Typography variant=\"body2\" color=\"text.secondary\">\n                    Progress: {Math.round(progressPercentage)}% ({Object.keys(progress).length}/{questions.length} questions)\n                </Typography>\n            </Box>\n\n            {transcript && (\n                <Card sx={{ mb: 4 }}>\n                    <CardContent>\n                        <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>\n                            <Typography variant=\"h6\">Transcript</Typography>\n                            <IconButton onClick={() => setShowTranscript(!showTranscript)}>\n                                {showTranscript ? <ExpandLessIcon /> : <ExpandMoreIcon />}\n                            </IconButton>\n                        </Box>\n                        <Collapse in={showTranscript}>\n                            <Paper \n                                sx={{ \n                                    p: 2, \n                                    backgroundColor: 'background.paper',\n                                    maxHeight: '400px',\n                                    overflow: 'auto'\n                                }}\n                            >\n                                <Typography \n                                    variant=\"body1\" \n                                    sx={{ \n                                        whiteSpace: 'pre-wrap',\n                                        lineHeight: 1.8\n                                    }}\n                                >\n                                    {transcript}\n                                </Typography>\n                            </Paper>\n                        </Collapse>\n                    </CardContent>\n                </Card>\n            )}\n\n            {currentQuestion && (\n                <Card sx={{ mb: 4 }}>\n                    <CardContent>\n                        <Typography variant=\"h6\" gutterBottom>\n                            Question {currentQuestionIndex + 1} of {questions.length}\n                        </Typography>\n                        <Typography variant=\"body1\" sx={{ mb: 3 }}>\n                            {currentQuestion.question_text}\n                        </Typography>\n\n                        <TextField\n                            fullWidth\n                            label=\"Your Answer\"\n                            value={answer}\n                            onChange={(e) => setAnswer(e.target.value)}\n                            variant=\"outlined\"\n                            sx={{ mb: 2 }}\n                            onKeyPress={(e) => {\n                                if (e.key === 'Enter' && answer.trim()) {\n                                    handleSubmitAnswer();\n                                }\n                            }}\n                            autoFocus\n                        />\n\n                        {feedback && (\n                            <Alert severity={feedback.type} sx={{ mt: 2, mb: 2 }}>\n                                {feedback.message}\n                            </Alert>\n                        )}\n\n                        <Grid container spacing={2} sx={{ mt: 2 }}>\n                            <Grid item>\n                                <Button\n                                    variant=\"contained\"\n                                    onClick={handleSubmitAnswer}\n                                    disabled={!answer.trim()}\n                                >\n                                    Submit Answer\n                                </Button>\n                            </Grid>\n                            {feedback && feedback.type === 'error' && (\n                                <Grid item>\n                                    <Button\n                                        variant=\"outlined\"\n                                        onClick={moveToNextQuestion}\n                                    >\n                                        Next Question\n                                    </Button>\n                                </Grid>\n                            )}\n                        </Grid>\n                    </CardContent>\n                </Card>\n            )}\n        </Container>\n    );\n};\n\nexport default PracticeSetPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}