{"ast":null,"code":"import api from './axiosConfig';\nconst transcriptService = {\n  getAllTranscripts: async () => {\n    try {\n      const response = await api.get('/transcripts/');\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Failed to fetch transcripts'\n      };\n    }\n  },\n  getFavoriteTranscripts: async () => {\n    try {\n      const response = await api.get('/transcripts/', {\n        params: {\n          favorite: true\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Failed to fetch favorite transcripts'\n      };\n    }\n  },\n  getTranscript: async id => {\n    try {\n      const response = await api.get(`/transcripts/${id}/`);\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        message: 'Failed to fetch transcript'\n      };\n    }\n  },\n  createTranscript: async (videoUrl, title = '') => {\n    try {\n      const response = await api.post('/transcripts/create-from-video/', {\n        video_id: videoUrl,\n        title: title || 'Untitled'\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response4;\n      throw ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.data) || {\n        message: 'Failed to create transcript'\n      };\n    }\n  },\n  deleteTranscript: async id => {\n    try {\n      await api.delete(`/transcripts/${id}/`);\n    } catch (error) {\n      var _error$response5;\n      throw ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || {\n        message: 'Failed to delete transcript'\n      };\n    }\n  },\n  updateTranscript: async (id, data) => {\n    try {\n      const response = await api.patch(`/transcripts/${id}/`, data);\n      return response.data;\n    } catch (error) {\n      var _error$response6;\n      throw ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.data) || {\n        message: 'Failed to update transcript'\n      };\n    }\n  },\n  generateQuestions: async (id, type = 'novice') => {\n    try {\n      const response = await api.get(`/transcripts/${id}/generate_questions/`, {\n        params: {\n          type\n        }\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response7;\n      throw ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.data) || {\n        message: 'Failed to generate questions'\n      };\n    }\n  },\n  toggleFavorite: async id => {\n    try {\n      const response = await api.post(`/transcripts/${id}/toggle_favorite/`);\n      return response.data;\n    } catch (error) {\n      var _error$response8;\n      throw ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data) || {\n        message: 'Failed to toggle favorite status'\n      };\n    }\n  }\n};\nexport default transcriptService;","map":{"version":3,"names":["api","transcriptService","getAllTranscripts","response","get","data","error","_error$response","message","getFavoriteTranscripts","params","favorite","_error$response2","getTranscript","id","_error$response3","createTranscript","videoUrl","title","post","video_id","_error$response4","deleteTranscript","delete","_error$response5","updateTranscript","patch","_error$response6","generateQuestions","type","_error$response7","toggleFavorite","_error$response8"],"sources":["/Users/arvindsudarshan/Documents/Hindi-QA/frontend/src/services/transcriptService.js"],"sourcesContent":["import api from './axiosConfig';\n\nconst transcriptService = {\n    getAllTranscripts: async () => {\n        try {\n            const response = await api.get('/transcripts/');\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: 'Failed to fetch transcripts' };\n        }\n    },\n\n    getFavoriteTranscripts: async () => {\n        try {\n            const response = await api.get('/transcripts/', {\n                params: { favorite: true }\n            });\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: 'Failed to fetch favorite transcripts' };\n        }\n    },\n\n    getTranscript: async (id) => {\n        try {\n            const response = await api.get(`/transcripts/${id}/`);\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: 'Failed to fetch transcript' };\n        }\n    },\n\n    createTranscript: async (videoUrl, title = '') => {\n        try {\n            const response = await api.post('/transcripts/create-from-video/', {\n                video_id: videoUrl,\n                title: title || 'Untitled'\n            });\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: 'Failed to create transcript' };\n        }\n    },\n\n    deleteTranscript: async (id) => {\n        try {\n            await api.delete(`/transcripts/${id}/`);\n        } catch (error) {\n            throw error.response?.data || { message: 'Failed to delete transcript' };\n        }\n    },\n\n    updateTranscript: async (id, data) => {\n        try {\n            const response = await api.patch(`/transcripts/${id}/`, data);\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: 'Failed to update transcript' };\n        }\n    },\n\n    generateQuestions: async (id, type = 'novice') => {\n        try {\n            const response = await api.get(`/transcripts/${id}/generate_questions/`, {\n                params: { type }\n            });\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: 'Failed to generate questions' };\n        }\n    },\n\n    toggleFavorite: async (id) => {\n        try {\n            const response = await api.post(`/transcripts/${id}/toggle_favorite/`);\n            return response.data;\n        } catch (error) {\n            throw error.response?.data || { message: 'Failed to toggle favorite status' };\n        }\n    }\n};\n\nexport default transcriptService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}