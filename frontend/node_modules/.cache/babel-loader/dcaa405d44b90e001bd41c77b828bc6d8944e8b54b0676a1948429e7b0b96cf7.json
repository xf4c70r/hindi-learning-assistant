{"ast":null,"code":"import api from './axiosConfig';\nconst qaService = {\n  generateQuestions: async (transcriptId, questionType = 'novice') => {\n    try {\n      const response = await api.get(`/transcripts/${transcriptId}/generate_questions/`, {\n        params: {\n          type: questionType\n        }\n      });\n\n      // Handle both response formats\n      if (response.data.questions) {\n        return response.data;\n      } else if (Array.isArray(response.data)) {\n        return {\n          questions: response.data\n        };\n      } else {\n        return {\n          questions: []\n        };\n      }\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Failed to generate questions'\n      };\n    }\n  },\n  getQuestions: async transcriptId => {\n    try {\n      const response = await api.get(`/transcripts/${transcriptId}/questions/`);\n\n      // Handle both MongoDB and Django response formats\n      if (Array.isArray(response.data)) {\n        return response.data.map(q => ({\n          ...q,\n          id: q._id || q.id,\n          question_text: q.question_text || q.question\n        }));\n      }\n      return [];\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Failed to fetch questions'\n      };\n    }\n  },\n  answerQuestion: async (transcriptId, questionId, answer) => {\n    try {\n      const response = await api.post(`/transcripts/${transcriptId}/questions/${questionId}/answer/`, {\n        answer: answer\n      });\n\n      // Ensure consistent response format\n      return {\n        is_correct: response.data.is_correct,\n        correct_answer: response.data.correct_answer,\n        feedback: response.data.feedback || (response.data.is_correct ? 'Correct!' : 'Incorrect. Try again!'),\n        attempts: response.data.attempts,\n        correct_attempts: response.data.correct_attempts\n      };\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        message: 'Failed to submit answer'\n      };\n    }\n  }\n};\nexport default qaService;","map":{"version":3,"names":["api","qaService","generateQuestions","transcriptId","questionType","response","get","params","type","data","questions","Array","isArray","error","_error$response","message","getQuestions","map","q","id","_id","question_text","question","_error$response2","answerQuestion","questionId","answer","post","is_correct","correct_answer","feedback","attempts","correct_attempts","_error$response3"],"sources":["/Users/arvindsudarshan/Documents/Hindi-QA/frontend/src/services/qaService.js"],"sourcesContent":["import api from './axiosConfig';\n\nconst qaService = {\n    generateQuestions: async (transcriptId, questionType = 'novice') => {\n        try {\n            const response = await api.get(`/transcripts/${transcriptId}/generate_questions/`, {\n                params: { type: questionType }\n            });\n            \n            // Handle both response formats\n            if (response.data.questions) {\n                return response.data;\n            } else if (Array.isArray(response.data)) {\n                return { questions: response.data };\n            } else {\n                return { questions: [] };\n            }\n        } catch (error) {\n            throw error.response?.data || { message: 'Failed to generate questions' };\n        }\n    },\n\n    getQuestions: async (transcriptId) => {\n        try {\n            const response = await api.get(`/transcripts/${transcriptId}/questions/`);\n            \n            // Handle both MongoDB and Django response formats\n            if (Array.isArray(response.data)) {\n                return response.data.map(q => ({\n                    ...q,\n                    id: q._id || q.id,\n                    question_text: q.question_text || q.question\n                }));\n            }\n            return [];\n        } catch (error) {\n            throw error.response?.data || { message: 'Failed to fetch questions' };\n        }\n    },\n\n    answerQuestion: async (transcriptId, questionId, answer) => {\n        try {\n            const response = await api.post(`/transcripts/${transcriptId}/questions/${questionId}/answer/`, {\n                answer: answer\n            });\n            \n            // Ensure consistent response format\n            return {\n                is_correct: response.data.is_correct,\n                correct_answer: response.data.correct_answer,\n                feedback: response.data.feedback || (response.data.is_correct ? 'Correct!' : 'Incorrect. Try again!'),\n                attempts: response.data.attempts,\n                correct_attempts: response.data.correct_attempts\n            };\n        } catch (error) {\n            throw error.response?.data || { message: 'Failed to submit answer' };\n        }\n    }\n};\n\nexport default qaService; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,eAAe;AAE/B,MAAMC,SAAS,GAAG;EACdC,iBAAiB,EAAE,MAAAA,CAAOC,YAAY,EAAEC,YAAY,GAAG,QAAQ,KAAK;IAChE,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,gBAAgBH,YAAY,sBAAsB,EAAE;QAC/EI,MAAM,EAAE;UAAEC,IAAI,EAAEJ;QAAa;MACjC,CAAC,CAAC;;MAEF;MACA,IAAIC,QAAQ,CAACI,IAAI,CAACC,SAAS,EAAE;QACzB,OAAOL,QAAQ,CAACI,IAAI;MACxB,CAAC,MAAM,IAAIE,KAAK,CAACC,OAAO,CAACP,QAAQ,CAACI,IAAI,CAAC,EAAE;QACrC,OAAO;UAAEC,SAAS,EAAEL,QAAQ,CAACI;QAAK,CAAC;MACvC,CAAC,MAAM;QACH,OAAO;UAAEC,SAAS,EAAE;QAAG,CAAC;MAC5B;IACJ,CAAC,CAAC,OAAOG,KAAK,EAAE;MAAA,IAAAC,eAAA;MACZ,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACR,QAAQ,cAAAS,eAAA,uBAAdA,eAAA,CAAgBL,IAAI,KAAI;QAAEM,OAAO,EAAE;MAA+B,CAAC;IAC7E;EACJ,CAAC;EAEDC,YAAY,EAAE,MAAOb,YAAY,IAAK;IAClC,IAAI;MACA,MAAME,QAAQ,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,gBAAgBH,YAAY,aAAa,CAAC;;MAEzE;MACA,IAAIQ,KAAK,CAACC,OAAO,CAACP,QAAQ,CAACI,IAAI,CAAC,EAAE;QAC9B,OAAOJ,QAAQ,CAACI,IAAI,CAACQ,GAAG,CAACC,CAAC,KAAK;UAC3B,GAAGA,CAAC;UACJC,EAAE,EAAED,CAAC,CAACE,GAAG,IAAIF,CAAC,CAACC,EAAE;UACjBE,aAAa,EAAEH,CAAC,CAACG,aAAa,IAAIH,CAAC,CAACI;QACxC,CAAC,CAAC,CAAC;MACP;MACA,OAAO,EAAE;IACb,CAAC,CAAC,OAAOT,KAAK,EAAE;MAAA,IAAAU,gBAAA;MACZ,MAAM,EAAAA,gBAAA,GAAAV,KAAK,CAACR,QAAQ,cAAAkB,gBAAA,uBAAdA,gBAAA,CAAgBd,IAAI,KAAI;QAAEM,OAAO,EAAE;MAA4B,CAAC;IAC1E;EACJ,CAAC;EAEDS,cAAc,EAAE,MAAAA,CAAOrB,YAAY,EAAEsB,UAAU,EAAEC,MAAM,KAAK;IACxD,IAAI;MACA,MAAMrB,QAAQ,GAAG,MAAML,GAAG,CAAC2B,IAAI,CAAC,gBAAgBxB,YAAY,cAAcsB,UAAU,UAAU,EAAE;QAC5FC,MAAM,EAAEA;MACZ,CAAC,CAAC;;MAEF;MACA,OAAO;QACHE,UAAU,EAAEvB,QAAQ,CAACI,IAAI,CAACmB,UAAU;QACpCC,cAAc,EAAExB,QAAQ,CAACI,IAAI,CAACoB,cAAc;QAC5CC,QAAQ,EAAEzB,QAAQ,CAACI,IAAI,CAACqB,QAAQ,KAAKzB,QAAQ,CAACI,IAAI,CAACmB,UAAU,GAAG,UAAU,GAAG,uBAAuB,CAAC;QACrGG,QAAQ,EAAE1B,QAAQ,CAACI,IAAI,CAACsB,QAAQ;QAChCC,gBAAgB,EAAE3B,QAAQ,CAACI,IAAI,CAACuB;MACpC,CAAC;IACL,CAAC,CAAC,OAAOnB,KAAK,EAAE;MAAA,IAAAoB,gBAAA;MACZ,MAAM,EAAAA,gBAAA,GAAApB,KAAK,CAACR,QAAQ,cAAA4B,gBAAA,uBAAdA,gBAAA,CAAgBxB,IAAI,KAAI;QAAEM,OAAO,EAAE;MAA0B,CAAC;IACxE;EACJ;AACJ,CAAC;AAED,eAAed,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}