{"ast":null,"code":"import api from './axiosConfig';\nconst practiceService = {\n  // Get all available practice sets\n  getPracticeSets: async () => {\n    try {\n      const response = await api.get('/practice/sets/');\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      throw ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || {\n        message: 'Failed to fetch practice sets'\n      };\n    }\n  },\n  // Get questions for a specific practice set\n  getPracticeQuestions: async (videoId, questionType) => {\n    try {\n      const response = await api.get(`/practice/questions/${videoId}/${questionType}/`);\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      throw ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || {\n        message: 'Failed to fetch practice questions'\n      };\n    }\n  },\n  // Get transcript for a video\n  getTranscript: async videoId => {\n    try {\n      const response = await api.get(`/transcripts/${videoId}/`);\n      return response.data;\n    } catch (error) {\n      console.warn(`Couldn't fetch transcript for video ${videoId}:`, error);\n      return null; // Return null instead of throwing to handle gracefully\n    }\n  },\n  // Submit an answer for a practice question\n  submitAnswer: async data => {\n    try {\n      const response = await api.post(`/practice/submit/${data.question_id}/`, {\n        answer: data.answer,\n        video_id: data.video_id,\n        type: data.type,\n        is_correct: data.is_correct\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response3;\n      throw ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || {\n        message: 'Failed to submit answer'\n      };\n    }\n  }\n};\nexport default practiceService;","map":{"version":3,"names":["api","practiceService","getPracticeSets","response","get","data","error","_error$response","message","getPracticeQuestions","videoId","questionType","_error$response2","getTranscript","console","warn","submitAnswer","post","question_id","answer","video_id","type","is_correct","_error$response3"],"sources":["/Users/arvindsudarshan/Documents/Hindi-QA/frontend/src/services/practiceService.js"],"sourcesContent":["import api from './axiosConfig';\r\n\r\nconst practiceService = {\r\n    // Get all available practice sets\r\n    getPracticeSets: async () => {\r\n        try {\r\n            const response = await api.get('/practice/sets/');\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Failed to fetch practice sets' };\r\n        }\r\n    },\r\n\r\n    // Get questions for a specific practice set\r\n    getPracticeQuestions: async (videoId, questionType) => {\r\n        try {\r\n            const response = await api.get(`/practice/questions/${videoId}/${questionType}/`);\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Failed to fetch practice questions' };\r\n        }\r\n    },\r\n\r\n    // Get transcript for a video\r\n    getTranscript: async (videoId) => {\r\n        try {\r\n            const response = await api.get(`/transcripts/${videoId}/`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.warn(`Couldn't fetch transcript for video ${videoId}:`, error);\r\n            return null;  // Return null instead of throwing to handle gracefully\r\n        }\r\n    },\r\n\r\n    // Submit an answer for a practice question\r\n    submitAnswer: async (data) => {\r\n        try {\r\n            const response = await api.post(`/practice/submit/${data.question_id}/`, {\r\n                answer: data.answer,\r\n                video_id: data.video_id,\r\n                type: data.type,\r\n                is_correct: data.is_correct\r\n            });\r\n            return response.data;\r\n        } catch (error) {\r\n            throw error.response?.data || { message: 'Failed to submit answer' };\r\n        }\r\n    }\r\n};\r\n\r\nexport default practiceService; "],"mappings":"AAAA,OAAOA,GAAG,MAAM,eAAe;AAE/B,MAAMC,eAAe,GAAG;EACpB;EACAC,eAAe,EAAE,MAAAA,CAAA,KAAY;IACzB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,iBAAiB,CAAC;MACjD,OAAOD,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAC,eAAA;MACZ,MAAM,EAAAA,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,uBAAdA,eAAA,CAAgBF,IAAI,KAAI;QAAEG,OAAO,EAAE;MAAgC,CAAC;IAC9E;EACJ,CAAC;EAED;EACAC,oBAAoB,EAAE,MAAAA,CAAOC,OAAO,EAAEC,YAAY,KAAK;IACnD,IAAI;MACA,MAAMR,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,uBAAuBM,OAAO,IAAIC,YAAY,GAAG,CAAC;MACjF,OAAOR,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAM,gBAAA;MACZ,MAAM,EAAAA,gBAAA,GAAAN,KAAK,CAACH,QAAQ,cAAAS,gBAAA,uBAAdA,gBAAA,CAAgBP,IAAI,KAAI;QAAEG,OAAO,EAAE;MAAqC,CAAC;IACnF;EACJ,CAAC;EAED;EACAK,aAAa,EAAE,MAAOH,OAAO,IAAK;IAC9B,IAAI;MACA,MAAMP,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,gBAAgBM,OAAO,GAAG,CAAC;MAC1D,OAAOP,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZQ,OAAO,CAACC,IAAI,CAAC,uCAAuCL,OAAO,GAAG,EAAEJ,KAAK,CAAC;MACtE,OAAO,IAAI,CAAC,CAAE;IAClB;EACJ,CAAC;EAED;EACAU,YAAY,EAAE,MAAOX,IAAI,IAAK;IAC1B,IAAI;MACA,MAAMF,QAAQ,GAAG,MAAMH,GAAG,CAACiB,IAAI,CAAC,oBAAoBZ,IAAI,CAACa,WAAW,GAAG,EAAE;QACrEC,MAAM,EAAEd,IAAI,CAACc,MAAM;QACnBC,QAAQ,EAAEf,IAAI,CAACe,QAAQ;QACvBC,IAAI,EAAEhB,IAAI,CAACgB,IAAI;QACfC,UAAU,EAAEjB,IAAI,CAACiB;MACrB,CAAC,CAAC;MACF,OAAOnB,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MAAA,IAAAiB,gBAAA;MACZ,MAAM,EAAAA,gBAAA,GAAAjB,KAAK,CAACH,QAAQ,cAAAoB,gBAAA,uBAAdA,gBAAA,CAAgBlB,IAAI,KAAI;QAAEG,OAAO,EAAE;MAA0B,CAAC;IACxE;EACJ;AACJ,CAAC;AAED,eAAeP,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}