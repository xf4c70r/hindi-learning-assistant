{"ast":null,"code":"var _jsxFileName = \"/Users/arvindsudarshan/Documents/Hindi-QA/frontend/src/components/transcripts/QASection.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { Box, Button, Card, CardContent, FormControl, FormControlLabel, Radio, RadioGroup, TextField, Typography, Select, MenuItem, Alert, CircularProgress, Chip, Snackbar } from '@mui/material';\nimport qaService from '../../services/qaService';\nimport './QASection.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QASection = ({\n  transcriptId\n}) => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [selectedType, setSelectedType] = useState('novice');\n  const [answers, setAnswers] = useState({});\n  const [feedback, setFeedback] = useState({});\n  const [score, setScore] = useState(0);\n  const [showAnswers, setShowAnswers] = useState(false);\n  const [submitting, setSubmitting] = useState(null);\n  const questionTypes = [{\n    value: 'novice',\n    label: 'Novice Questions'\n  }, {\n    value: 'mcq',\n    label: 'Multiple Choice Questions'\n  }, {\n    value: 'fill_blanks',\n    label: 'Fill in the Blanks'\n  }];\n  const loadQuestions = useCallback(async () => {\n    try {\n      const data = await qaService.getQuestions(transcriptId);\n      setQuestions(data);\n      setError(null);\n    } catch (err) {\n      setError(err.message || 'Failed to load questions');\n    }\n  }, [transcriptId]);\n  useEffect(() => {\n    loadQuestions();\n  }, [loadQuestions]);\n  const handleGenerateQuestions = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await qaService.generateQuestions(transcriptId, selectedType);\n      if (response.questions && Array.isArray(response.questions)) {\n        const formattedQuestions = response.questions.map(q => ({\n          id: q._id || q.id,\n          // Handle both MongoDB _id and Django id\n          question_text: q.question_text || q.question,\n          answer: q.answer,\n          question_type: q.question_type || q.type || selectedType,\n          options: q.options || []\n        }));\n        setQuestions(prevQuestions => [...prevQuestions, ...formattedQuestions]);\n        setAnswers({});\n        setFeedback({});\n        setScore(0);\n        setShowAnswers(false);\n      } else {\n        setError('No questions were generated');\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to generate questions');\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleAnswerChange = (questionId, answer) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: answer\n    }));\n    // Clear feedback when answer changes\n    setFeedback(prev => ({\n      ...prev,\n      [questionId]: null\n    }));\n  };\n  const handleSubmitAnswer = async questionId => {\n    setSubmitting(questionId);\n    try {\n      const response = await qaService.answerQuestion(transcriptId, questionId, answers[questionId]);\n\n      // Handle both MongoDB and Django response formats\n      const feedbackData = {\n        is_correct: response.is_correct,\n        feedback: response.is_correct ? 'Correct!' : 'Incorrect. Try again!',\n        correct_answer: response.is_correct ? null : response.correct_answer\n      };\n      setFeedback(prev => ({\n        ...prev,\n        [questionId]: feedbackData\n      }));\n\n      // Update score if answer is correct\n      if (feedbackData.is_correct) {\n        setScore(prev => prev + 1);\n      }\n    } catch (err) {\n      setError(err.message || 'Failed to submit answer');\n    } finally {\n      setSubmitting(null);\n    }\n  };\n  const renderQuestionInput = question => {\n    var _question$options;\n    switch (question.question_type || question.type) {\n      // Handle both formats\n      case 'mcq':\n        return /*#__PURE__*/_jsxDEV(RadioGroup, {\n          value: answers[question.id] || '',\n          onChange: e => handleAnswerChange(question.id, e.target.value),\n          children: (_question$options = question.options) === null || _question$options === void 0 ? void 0 : _question$options.map((option, index) => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n            value: option,\n            control: /*#__PURE__*/_jsxDEV(Radio, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 42\n            }, this),\n            label: option,\n            disabled: !!feedback[question.id]\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }, this);\n      case 'fill_blanks':\n        // Split the question text by the blank marker\n        const parts = question.question_text.split('____');\n        return /*#__PURE__*/_jsxDEV(Box, {\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            sx: {\n              mb: 1\n            },\n            children: [parts[0], /*#__PURE__*/_jsxDEV(TextField, {\n              sx: {\n                mx: 1,\n                width: '150px'\n              },\n              size: \"small\",\n              value: answers[question.id] || '',\n              onChange: e => handleAnswerChange(question.id, e.target.value),\n              placeholder: \"\\u092D\\u0930\\u0947\\u0902\",\n              variant: \"outlined\",\n              disabled: !!feedback[question.id]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 29\n            }, this), parts[1]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 21\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(TextField, {\n          fullWidth: true,\n          multiline: true,\n          rows: 3,\n          value: answers[question.id] || '',\n          onChange: e => handleAnswerChange(question.id, e.target.value),\n          placeholder: \"Enter your answer\",\n          variant: \"outlined\",\n          disabled: !!feedback[question.id]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 21\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      mt: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        gap: 2,\n        mb: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        sx: {\n          minWidth: 200\n        },\n        children: /*#__PURE__*/_jsxDEV(Select, {\n          value: selectedType,\n          onChange: e => setSelectedType(e.target.value),\n          displayEmpty: true,\n          children: questionTypes.map(type => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: type.value,\n            children: type.label\n          }, type.value, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        onClick: handleGenerateQuestions,\n        disabled: loading,\n        startIcon: loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 42\n        }, this) : null,\n        children: loading ? 'Generating...' : 'Generate Questions'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outlined\",\n        onClick: () => setShowAnswers(!showAnswers),\n        children: showAnswers ? 'Hide Answers' : 'Show Answers'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        mb: 2\n      },\n      onClose: () => setError(null),\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 17\n    }, this), questions.length > 0 && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      sx: {\n        mb: 2\n      },\n      children: [\"Score: \", score, \"/\", questions.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flexDirection: 'column',\n        gap: 2\n      },\n      children: questions.map((question, index) => /*#__PURE__*/_jsxDEV(Card, {\n        variant: \"outlined\",\n        children: /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle1\",\n              children: [\"Question \", index + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 232,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              label: (question.question_type || question.type || selectedType).toUpperCase(),\n              color: \"primary\",\n              size: \"small\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body1\",\n            sx: {\n              mb: 2\n            },\n            children: question.question_text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 29\n          }, this), !showAnswers && !feedback[question.id] && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [renderQuestionInput(question), /*#__PURE__*/_jsxDEV(Box, {\n              sx: {\n                mt: 2\n              },\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                variant: \"contained\",\n                onClick: () => handleSubmitAnswer(question.id),\n                disabled: !answers[question.id] || submitting === question.id,\n                startIcon: submitting === question.id ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n                  size: 20\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 254,\n                  columnNumber: 85\n                }, this) : null,\n                children: submitting === question.id ? 'Submitting...' : 'Submit Answer'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true), feedback[question.id] && /*#__PURE__*/_jsxDEV(Alert, {\n            severity: feedback[question.id].is_correct ? 'success' : 'error',\n            sx: {\n              mt: 2\n            },\n            children: [feedback[question.id].feedback, !feedback[question.id].is_correct && /*#__PURE__*/_jsxDEV(Typography, {\n              sx: {\n                mt: 1\n              },\n              children: [\"Correct answer: \", feedback[question.id].correct_answer]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 33\n          }, this), showAnswers && /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              mt: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"subtitle2\",\n              color: \"primary\",\n              children: \"Correct Answer:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: question.answer\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 25\n        }, this)\n      }, question.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), questions.length === 0 && !loading && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      color: \"text.secondary\",\n      align: \"center\",\n      children: \"No questions generated yet. Click the button above to generate questions.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: !!error,\n      autoHideDuration: 6000,\n      onClose: () => setError(null),\n      message: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n};\n_s(QASection, \"g0tx6nGIz3/xCZ+9l7ETYSZYLno=\");\n_c = QASection;\nexport default QASection;\nvar _c;\n$RefreshReg$(_c, \"QASection\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","Box","Button","Card","CardContent","FormControl","FormControlLabel","Radio","RadioGroup","TextField","Typography","Select","MenuItem","Alert","CircularProgress","Chip","Snackbar","qaService","jsxDEV","_jsxDEV","Fragment","_Fragment","QASection","transcriptId","_s","questions","setQuestions","loading","setLoading","error","setError","selectedType","setSelectedType","answers","setAnswers","feedback","setFeedback","score","setScore","showAnswers","setShowAnswers","submitting","setSubmitting","questionTypes","value","label","loadQuestions","data","getQuestions","err","message","handleGenerateQuestions","response","generateQuestions","Array","isArray","formattedQuestions","map","q","id","_id","question_text","question","answer","question_type","type","options","prevQuestions","handleAnswerChange","questionId","prev","handleSubmitAnswer","answerQuestion","feedbackData","is_correct","correct_answer","renderQuestionInput","_question$options","onChange","e","target","children","option","index","control","fileName","_jsxFileName","lineNumber","columnNumber","disabled","parts","split","variant","sx","mb","mx","width","size","placeholder","fullWidth","multiline","rows","mt","display","gap","minWidth","displayEmpty","onClick","startIcon","length","severity","onClose","flexDirection","justifyContent","toUpperCase","color","align","open","autoHideDuration","_c","$RefreshReg$"],"sources":["/Users/arvindsudarshan/Documents/Hindi-QA/frontend/src/components/transcripts/QASection.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport {\n    Box,\n    Button,\n    Card,\n    CardContent,\n    FormControl,\n    FormControlLabel,\n    Radio,\n    RadioGroup,\n    TextField,\n    Typography,\n    Select,\n    MenuItem,\n    Alert,\n    CircularProgress,\n    Chip,\n    Snackbar\n} from '@mui/material';\nimport qaService from '../../services/qaService';\nimport './QASection.css';\n\nconst QASection = ({ transcriptId }) => {\n    const [questions, setQuestions] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [selectedType, setSelectedType] = useState('novice');\n    const [answers, setAnswers] = useState({});\n    const [feedback, setFeedback] = useState({});\n    const [score, setScore] = useState(0);\n    const [showAnswers, setShowAnswers] = useState(false);\n    const [submitting, setSubmitting] = useState(null);\n\n    const questionTypes = [\n        { value: 'novice', label: 'Novice Questions' },\n        { value: 'mcq', label: 'Multiple Choice Questions' },\n        { value: 'fill_blanks', label: 'Fill in the Blanks' }\n    ];\n\n    const loadQuestions = useCallback(async () => {\n        try {\n            const data = await qaService.getQuestions(transcriptId);\n            setQuestions(data);\n            setError(null);\n        } catch (err) {\n            setError(err.message || 'Failed to load questions');\n        }\n    }, [transcriptId]);\n\n    useEffect(() => {\n        loadQuestions();\n    }, [loadQuestions]);\n\n    const handleGenerateQuestions = async () => {\n        setLoading(true);\n        setError(null);\n        try {\n            const response = await qaService.generateQuestions(transcriptId, selectedType);\n            if (response.questions && Array.isArray(response.questions)) {\n                const formattedQuestions = response.questions.map(q => ({\n                    id: q._id || q.id,  // Handle both MongoDB _id and Django id\n                    question_text: q.question_text || q.question,\n                    answer: q.answer,\n                    question_type: q.question_type || q.type || selectedType,\n                    options: q.options || []\n                }));\n                setQuestions(prevQuestions => [...prevQuestions, ...formattedQuestions]);\n                setAnswers({});\n                setFeedback({});\n                setScore(0);\n                setShowAnswers(false);\n            } else {\n                setError('No questions were generated');\n            }\n        } catch (err) {\n            setError(err.message || 'Failed to generate questions');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleAnswerChange = (questionId, answer) => {\n        setAnswers(prev => ({\n            ...prev,\n            [questionId]: answer\n        }));\n        // Clear feedback when answer changes\n        setFeedback(prev => ({\n            ...prev,\n            [questionId]: null\n        }));\n    };\n\n    const handleSubmitAnswer = async (questionId) => {\n        setSubmitting(questionId);\n        try {\n            const response = await qaService.answerQuestion(\n                transcriptId,\n                questionId,\n                answers[questionId]\n            );\n            \n            // Handle both MongoDB and Django response formats\n            const feedbackData = {\n                is_correct: response.is_correct,\n                feedback: response.is_correct ? 'Correct!' : 'Incorrect. Try again!',\n                correct_answer: response.is_correct ? null : response.correct_answer\n            };\n            \n            setFeedback(prev => ({\n                ...prev,\n                [questionId]: feedbackData\n            }));\n            \n            // Update score if answer is correct\n            if (feedbackData.is_correct) {\n                setScore(prev => prev + 1);\n            }\n        } catch (err) {\n            setError(err.message || 'Failed to submit answer');\n        } finally {\n            setSubmitting(null);\n        }\n    };\n\n    const renderQuestionInput = (question) => {\n        switch (question.question_type || question.type) {  // Handle both formats\n            case 'mcq':\n                return (\n                    <RadioGroup\n                        value={answers[question.id] || ''}\n                        onChange={(e) => handleAnswerChange(question.id, e.target.value)}\n                    >\n                        {question.options?.map((option, index) => (\n                            <FormControlLabel\n                                key={index}\n                                value={option}\n                                control={<Radio />}\n                                label={option}\n                                disabled={!!feedback[question.id]}\n                            />\n                        ))}\n                    </RadioGroup>\n                );\n            case 'fill_blanks':\n                // Split the question text by the blank marker\n                const parts = question.question_text.split('____');\n                return (\n                    <Box>\n                        <Typography variant=\"body1\" sx={{ mb: 1 }}>\n                            {parts[0]}\n                            <TextField\n                                sx={{ mx: 1, width: '150px' }}\n                                size=\"small\"\n                                value={answers[question.id] || ''}\n                                onChange={(e) => handleAnswerChange(question.id, e.target.value)}\n                                placeholder=\"भरें\"\n                                variant=\"outlined\"\n                                disabled={!!feedback[question.id]}\n                            />\n                            {parts[1]}\n                        </Typography>\n                    </Box>\n                );\n            default:\n                return (\n                    <TextField\n                        fullWidth\n                        multiline\n                        rows={3}\n                        value={answers[question.id] || ''}\n                        onChange={(e) => handleAnswerChange(question.id, e.target.value)}\n                        placeholder=\"Enter your answer\"\n                        variant=\"outlined\"\n                        disabled={!!feedback[question.id]}\n                    />\n                );\n        }\n    };\n\n    return (\n        <Box sx={{ mt: 2 }}>\n            <Box sx={{ display: 'flex', gap: 2, mb: 3 }}>\n                <FormControl sx={{ minWidth: 200 }}>\n                    <Select\n                        value={selectedType}\n                        onChange={(e) => setSelectedType(e.target.value)}\n                        displayEmpty\n                    >\n                        {questionTypes.map(type => (\n                            <MenuItem key={type.value} value={type.value}>\n                                {type.label}\n                            </MenuItem>\n                        ))}\n                    </Select>\n                </FormControl>\n                <Button\n                    variant=\"contained\"\n                    onClick={handleGenerateQuestions}\n                    disabled={loading}\n                    startIcon={loading ? <CircularProgress size={20} /> : null}\n                >\n                    {loading ? 'Generating...' : 'Generate Questions'}\n                </Button>\n                {questions.length > 0 && (\n                    <Button\n                        variant=\"outlined\"\n                        onClick={() => setShowAnswers(!showAnswers)}\n                    >\n                        {showAnswers ? 'Hide Answers' : 'Show Answers'}\n                    </Button>\n                )}\n            </Box>\n\n            {error && (\n                <Alert severity=\"error\" sx={{ mb: 2 }} onClose={() => setError(null)}>\n                    {error}\n                </Alert>\n            )}\n\n            {questions.length > 0 && (\n                <Typography variant=\"h6\" sx={{ mb: 2 }}>\n                    Score: {score}/{questions.length}\n                </Typography>\n            )}\n\n            <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2 }}>\n                {questions.map((question, index) => (\n                    <Card key={question.id} variant=\"outlined\">\n                        <CardContent>\n                            <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 2 }}>\n                                <Typography variant=\"subtitle1\">\n                                    Question {index + 1}\n                                </Typography>\n                                <Chip\n                                    label={(question.question_type || question.type || selectedType).toUpperCase()}\n                                    color=\"primary\"\n                                    size=\"small\"\n                                />\n                            </Box>\n                            \n                            <Typography variant=\"body1\" sx={{ mb: 2 }}>\n                                {question.question_text}\n                            </Typography>\n\n                            {!showAnswers && !feedback[question.id] && (\n                                <>\n                                    {renderQuestionInput(question)}\n                                    <Box sx={{ mt: 2 }}>\n                                        <Button\n                                            variant=\"contained\"\n                                            onClick={() => handleSubmitAnswer(question.id)}\n                                            disabled={!answers[question.id] || submitting === question.id}\n                                            startIcon={submitting === question.id ? <CircularProgress size={20} /> : null}\n                                        >\n                                            {submitting === question.id ? 'Submitting...' : 'Submit Answer'}\n                                        </Button>\n                                    </Box>\n                                </>\n                            )}\n\n                            {feedback[question.id] && (\n                                <Alert\n                                    severity={feedback[question.id].is_correct ? 'success' : 'error'}\n                                    sx={{ mt: 2 }}\n                                >\n                                    {feedback[question.id].feedback}\n                                    {!feedback[question.id].is_correct && (\n                                        <Typography sx={{ mt: 1 }}>\n                                            Correct answer: {feedback[question.id].correct_answer}\n                                        </Typography>\n                                    )}\n                                </Alert>\n                            )}\n\n                            {showAnswers && (\n                                <Box sx={{ mt: 2 }}>\n                                    <Typography variant=\"subtitle2\" color=\"primary\">\n                                        Correct Answer:\n                                    </Typography>\n                                    <Typography variant=\"body1\">\n                                        {question.answer}\n                                    </Typography>\n                                </Box>\n                            )}\n                        </CardContent>\n                    </Card>\n                ))}\n            </Box>\n\n            {questions.length === 0 && !loading && (\n                <Typography variant=\"body1\" color=\"text.secondary\" align=\"center\">\n                    No questions generated yet. Click the button above to generate questions.\n                </Typography>\n            )}\n\n            <Snackbar\n                open={!!error}\n                autoHideDuration={6000}\n                onClose={() => setError(null)}\n                message={error}\n            />\n        </Box>\n    );\n};\n\nexport default QASection; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}